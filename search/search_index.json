{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is a modern Cookiecutter template that can be used to initiate a Python project with all the necessary tools for development, testing, and deployment. It supports the following features:</p> <ul> <li>uv for dependency management</li> <li>Supports both src and flat layout.</li> <li>CI/CD with GitHub Actions</li> <li>Pre-commit hooks with pre-commit</li> <li>Code quality with ruff, mypy/ty and deptry.</li> <li>Publishing to PyPI by creating a new release on GitHub</li> <li>Testing and coverage with pytest and codecov</li> <li>Documentation with MkDocs</li> <li>Compatibility testing for multiple versions of Python with tox-uv</li> <li>Containerization with Docker or Podman</li> <li>Development environment with VSCode devcontainers</li> </ul> <p>An example of a repository generated with this package can be found here.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>On your local machine, navigate to the directory in which you want to create a project directory, and run the following command:</p> <pre><code>uvx cookiecutter https://github.com/fpgmaas/cookiecutter-uv.git\n</code></pre> <p>or if you don't have <code>uv</code> installed yet:</p> <pre><code>pip install cookiecutter\ncookiecutter https://github.com/fpgmaas/cookiecutter-uv.git\n</code></pre> <p>Follow the prompts to configure your project. Once completed, a new directory containing your project will be created. Then navigate into your newly created project directory and follow the instructions in the <code>README.md</code> to complete the setup of your project.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This project is partially based on Audrey Feldroy's great cookiecutter-pypackage.</p>"},{"location":"prompt_arguments/","title":"Prompt arguments","text":"<p>When running the command <code>ccp</code> a prompt will start which enables you to configure your repository. The prompt values and their explanation are as follows:</p> <p>author</p> <p>Your full name.</p> <p>email</p> <p>Your email address.</p> <p>author_github_handle</p> <p>Your github handle, i.e. <code>&lt;handle&gt;</code> in <code>https://github.com/&lt;handle&gt;</code></p> <p>project_name</p> <p>Your project name. Should be equal to the name of your repository and it should only contain alphanumeric characters and <code>-</code>'s.</p> <p>project_slug</p> <p>The project slug, will default to the <code>project_name</code> with all <code>-</code>'s replaced with <code>_</code>. This will be how you import your code later, e.g.</p> <pre><code>from &lt;project_slug&gt; import foo\n</code></pre> <p>project_description</p> <p>A short description of your project.</p> <p>layout</p> <p><code>\"flat\"</code> or <code>\"src\"</code>, defaults to <code>\"flat\"</code>.</p> <ul> <li><code>\"flat\"</code>: Places the Python module in the root directory.</li> <li><code>\"src\"</code>: Organizes the project by placing the Python module inside a <code>src</code> directory.</li> </ul> <p>include_github_actions</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds a <code>.github</code> directory with various actions and workflows to setup the environment and run code formatting checks and unittests.</p> <p>publish_to_pypi</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds functionality to the <code>Makefile</code> and Github workflows to make publishing your code as simple as creating a new release release on Github. For more info, see Publishing to PyPI.</p> <p>deptry</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds deptry to the development dependencies of the project, and adds it to the <code>make check</code> command. <code>deptry</code> is a command line tool to check for issues with dependencies in a Python project, such as obsolete or missing dependencies.</p> <p>mkdocs</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds MkDocs documentation to your project. This includes automatically parsing your docstrings and adding them to the documentation. Documentation will be deployed to the <code>gh-pages</code> branch.</p> <p>codecov</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds code coverage checks with codecov.</p> <p>dockerfile</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds a simple Dockerfile.</p> <p>devcontainer</p> <p><code>\"y\"</code> or <code>\"n\"</code>. Adds a devcontainer specification to the project along with pre-installed pre-commit hooks and VSCode python extension configuration.</p> <p>open_source_license</p> <p>Choose a license. Options: <code>[\"1. MIT License\", \"2. BSD license\", \"3. ISC license\",  \"4. Apache Software License 2.0\", \"5. GNU General Public License v3\", \"6. Not open source\"]</code></p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This page contains a complete tutorial on how to create your project.</p>"},{"location":"tutorial/#step-1-install-uv","title":"Step 1: Install uv","text":"<p>To start, we will need to install <code>uv</code>. The instructions to install uv can be found here. For MacOS or Linux;</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-project","title":"Step 2: Generate your project","text":"<p>On your local machine, navigate to the directory in which you want to create a project directory, and run the following command:</p> <pre><code>uvx cookiecutter https://github.com/fpgmaas/cookiecutter-uv.git\n</code></pre> <p>For an explanation of the prompt arguments, see Prompt Arguments.</p>"},{"location":"tutorial/#step-3-set-up-your-github-repository","title":"Step 3: Set up your Github repository","text":"<p>Create an empty new repository on Github. Give it a name that only contains alphanumeric characters and optionally <code>-</code>. DO NOT check any boxes under the option <code>Initialize this repository with</code>.</p>"},{"location":"tutorial/#step-4-upload-your-project-to-github","title":"Step 4: Upload your project to Github","text":"<p>Run the following commands, replacing <code>&lt;project-name&gt;</code> with the name that you also gave the Github repository and <code>&lt;github_author_handle&gt;</code> with your Github username.</p> <pre><code>cd &lt;project_name&gt;\ngit init -b main\ngit add .\ngit commit -m \"Init commit\"\ngit remote add origin git@github.com:&lt;github_author_handle&gt;/&lt;project_name&gt;.git\ngit push -u origin main\n</code></pre>"},{"location":"tutorial/#step-5-set-up-your-development-environment","title":"Step 5: Set Up Your Development Environment","text":"<p>Initially, the CI/CD pipeline will fail for two reasons:</p> <ul> <li>The project does not yet contain a <code>uv.lock</code> file</li> <li>There are a few formatting issues in the project</li> </ul> <p>To fix that, we first install the environment and the pre-commit hooks with:</p> <pre><code>make install\n</code></pre> <p>This will generate the <code>uv.lock</code> file</p>"},{"location":"tutorial/#step-6-run-the-pre-commit-hooks","title":"Step 6: Run the pre-commit hooks","text":"<p>Now, to resolve the formatting issues, let's run the pre-commit hooks:</p> <pre><code>uv run pre-commit run -a\n</code></pre>"},{"location":"tutorial/#7-commit-the-changes","title":"7. Commit the changes","text":"<p>Now we commit the changes made by the two steps above to the repository:</p> <pre><code>git add .\ngit commit -m 'Fix formatting issues'\ngit push origin main\n</code></pre>"},{"location":"tutorial/#step-8-sign-up-to-codecovio","title":"Step 8: Sign up to codecov.io","text":"<p>If you enabled code coverage with codecov for your project, you should sign up with your GitHub account at codecov.io</p>"},{"location":"tutorial/#step-9-configure-your-repository-secrets","title":"Step 9: Configure your repository secrets","text":"<p>If you want to deploy your project to PyPI using the Github Actions, you will have to set some repository secrets. For instructions on how to do that, see here.</p>"},{"location":"tutorial/#step-10-enable-your-documentation","title":"Step 10: Enable your documentation","text":"<p>To enable your documentation on GitHub, first navigate to <code>Settings &gt; Actions &gt; General</code> in your repository, and under <code>Workflow permissions</code> select <code>Read and write permissions</code>.</p>"},{"location":"tutorial/#step-11-create-a-new-release","title":"Step 11: Create a new release","text":"<p>To trigger a new release, navigate to your repository on GitHub, click <code>Releases</code> on the right, and then select <code>Draft a new release</code>. If you fail to find the button, you could also directly visit <code>https://github.com/&lt;username&gt;/&lt;repository-name&gt;/releases/new</code>.</p> <p>Give your release a title, and add a new tag in the form <code>*.*.*</code> where the <code>*</code>'s are alphanumeric. To finish, press <code>Publish release</code>.</p>"},{"location":"tutorial/#step-12-enable-your-documentation-ctd","title":"Step 12: Enable your documentation ct'd","text":"<p>Then navigate to <code>Settings &gt; Code and Automation &gt; Pages</code>. If you succesfully created a new release, you should see a notification saying <code>Your site is ready to be published at https://&lt;author_github_handle&gt;.github.io/&lt;project_name&gt;/</code>.</p> <p>To finalize deploying your documentation, under <code>Source</code>, select the branch <code>gh-pages</code>.</p>"},{"location":"tutorial/#step-12-youre-all-set","title":"Step 12: You're all set!","text":"<p>That's it! I hope this repository saved you a lot of manual configuration. If you have any improvement suggestions, feel free to raise an issue or open a PR on Github!</p>"},{"location":"features/cicd/","title":"CI/CD with Github actions","text":"<p>when <code>include_github_actions</code> is set to <code>\"y\"</code>, a <code>.github</code> directory is added with the following structure:</p> <pre><code>.github\n\u251c\u2500\u2500 workflows\n\u251c\u2500\u2500\u2500 run-checks\n\u2502    \u2514\u2500\u2500 action.yml\n\u251c\u2500\u2500\u2500 setup-python-env\n\u2502    \u2514\u2500\u2500 action.yml\n\u251c\u2500\u2500 on-merge-to-main.yml\n\u251c\u2500\u2500 on-pull-request.yml\n\u2514\u2500\u2500 on-release-main.yml\n</code></pre> <p><code>on-merge-to-main.yml</code> and <code>on-pull-request.yml</code> are identical except for their trigger conditions; the first is run whenever a new commit is made to <code>main</code> (which should only happen through merge requests, hence the name), and the latter is run whenever a pull request is opened or updated. They call the <code>action.yml</code> files to set-up the environment, run the tests, and check the code formatting.</p> <p><code>on-release-main.yml</code> does all of the former whenever a new release is made on the <code>main</code> branch. In addition, <code>on-release-main.yml</code> also publishes the project to PyPI if <code>publish_to_pypi</code> is set to <code>\"y\"</code>, and it builds and deploys the documentation if <code>mkdocs</code> is set to <code>\"y\"</code>. To learn more about these features, see Publishing to PyPI and Documentation with MkDocs</p> <p>Additionally, all workflows check for compatibility with multiple Python versions if <code>tox</code> is set to <code>\"y\"</code>.</p>"},{"location":"features/cicd/#how-to-trigger-a-release","title":"How to trigger a release?","text":"<p>To trigger a new release, navigate to your repository on GitHub, click <code>Releases</code> on the right, and then select <code>Draft a new release</code>. If you fail to find the button, you could also directly visit <code>https://github.com/&lt;username&gt;/&lt;repository-name&gt;/releases/new</code>.</p> <p>Give your release a title, and add a new tag in the form <code>*.*.*</code> where the <code>*</code>'s are alphanumeric. To finish, press <code>Publish release</code>.</p>"},{"location":"features/codecov/","title":"Test coverage with codecov","text":"<p>If <code>codecov</code> is set to <code>\"y\"</code>, <code>pytest-cov</code> is added as a development dependency, and <code>make test</code> will run the tests and output a coverage report as <code>coverage.xml</code>. If <code>include_github_actions</code> is set to <code>\"y\"</code>, coverage tests with codecov are added to the CI/CD pipeline. To enable this, sign up at codecov.io with your GitHub account. If codecov is configured to require token authentication for the upload, then follow the instructions for token generation and how to add it on your GitHub repository. Additionally, a <code>codecov.yaml</code> file is created, with the following defaults:</p> <pre><code># Badge color changes from red to green between 70% and 100%\n# PR pipeline fails if codecov falls with 1%\n\ncoverage:\n  range: 70..100\n  round: down\n  precision: 1\n  status:\n    project:\n      default:\n        target: auto\n        threshold: 1%\n\n# Ignoring Paths\n# --------------\n# which folders/files to ignore\nignore:\n  - \"foo/bar.py\"\n</code></pre> <p>If <code>codecov</code> is set to <code>\"n\"</code>, <code>pytest-cov</code> is not added to the development dependencies and the github actions won't produce a coverage report.</p>"},{"location":"features/devcontainer/","title":"Reproducible development environments with VSCode devcontainers","text":"<p>If <code>devcontainer</code> is set to <code>\"y\"</code> project uses the VSCode devcontainer specification to create a reproducible development environment. The devcontainer is defined in the <code>.devcontainer</code> directory and pre-installs all dependencies from uv required to develop, test and build the project.</p> <p>The devcontainer also installs the pre-commit hooks and configures the VSCode python extension to use the appropriate python interpretor and pytest paths.</p>"},{"location":"features/docker/","title":"Containerization with Docker or Podman","text":"<p>If <code>dockerfile</code> is set to <code>\"y\"</code>, a simple <code>Dockerfile</code> is added to the repository. The Dockerfile installs uv, sets up the environment, and runs <code>foo.py</code> when executed.</p> <p>The container image can be built with:</p> <pre><code>docker build . -t my-container-image\n</code></pre> <p>or, if using Podman:</p> <pre><code>podman build . -t my-container-image\n</code></pre> <p>It can then be run in the background with:</p> <pre><code>docker run -d my-container-image\n</code></pre> <p>or, if using Podman:</p> <pre><code>podman run -d my-container-image\n</code></pre> <p>Alternatively, run it in interactive mode with:</p> <pre><code>docker run --rm -it --entrypoint bash my-container-image\n</code></pre> <p>or, if using Podman:</p> <pre><code>podman run --rm -it --entrypoint bash my-container-image\n</code></pre>"},{"location":"features/linting/","title":"Linting and code quality","text":"<p>Code can be linted and quality-checked with the command</p> <pre><code>make check\n</code></pre> <p>Note that this requires the pre-commit hooks to be installed.</p> <p>This command will run the following tools:</p>"},{"location":"features/linting/#ruff","title":"ruff","text":"<p>ruff is used to lint and format the code, and it is configured through <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\ntarget-version = \"py39\"\nline-length = 120\nfix = true\nselect = [\n    # flake8-2020\n    \"YTT\",\n    # flake8-bandit\n    \"S\",\n    # flake8-bugbear\n    \"B\",\n    # flake8-builtins\n    \"A\",\n    # flake8-comprehensions\n    \"C4\",\n    # flake8-debugger\n    \"T10\",\n    # flake8-simplify\n    \"SIM\",\n    # isort\n    \"I\",\n    # mccabe\n    \"C90\",\n    # pycodestyle\n    \"E\", \"W\",\n    # pyflakes\n    \"F\",\n    # pygrep-hooks\n    \"PGH\",\n    # pyupgrade\n    \"UP\",\n    # ruff\n    \"RUF\",\n    # tryceratops\n    \"TRY\",\n]\nignore = [\n    # LineTooLong\n    \"E501\",\n    # DoNotAssignLambda\n    \"E731\",\n]\n\n[tool.ruff.format]\npreview = true\n\n[tool.ruff.per-file-ignores]\n\"tests/*\" = [\"S101\"]\n</code></pre>"},{"location":"features/linting/#mypy","title":"mypy","text":"<p>mypy is used for static type checking, and it's configuration can be edited in <code>pyproject.toml</code>.</p> <pre><code>[tool.mypy]\ndisallow_untyped_defs = true\ndisallow_any_unimported = true\nno_implicit_optional = true\ncheck_untyped_defs = true\nwarn_return_any = true\nwarn_unused_ignores = true\nshow_error_codes = true\nexclude = [\n    '\\.venv',\n    '{{cookiecutter.project_name}}',\n    'tests'\n]\n</code></pre>"},{"location":"features/linting/#ty","title":"ty","text":"<p>ty is an extremely fast type checker (and language server) that can be used instead of mypy, and it's configuration can be edited in <code>pyproject.toml</code>.</p> <pre><code>[tool.ty.environment]\npython = \"./.venv\"\npython-version = \"3.9\"\n</code></pre>"},{"location":"features/linting/#deptry","title":"deptry","text":"<p>deptry is used to check the code for dependency issues, and it can be configured by adding a <code>[tool.deptry]</code> section in <code>pyproject.toml</code>. For more information, see this section documentation of deptry.</p>"},{"location":"features/linting/#github-actions","title":"Github Actions","text":"<p>If <code>include_github_actions</code> is set to <code>\"y\"</code>, code formatting is checked for every merge request, every merge to main, and every release.</p>"},{"location":"features/makefile/","title":"Makefile","text":"<p>The generated repository will have a <code>Makefile</code> available. A list of all available commands that are available can be obtained by running <code>make help</code> in the terminal. Initially, if all features are selected, the following commands are available:</p> <pre><code>install              Install the uv environment and install the pre-commit hooks\ncheck                Lint and check code by running ruff, mypy and deptry.\ntest                 Test the code with pytest\nbuild                Build wheel file using uv\nclean-build          clean build artifacts\npublish              publish a release to pypi.\nbuild-and-publish    Build and publish.\ndocs-test            Test if documentation can be built without warnings or errors\ndocs                 Build and serve the documentation\n</code></pre>"},{"location":"features/mkdocs/","title":"Documentation with MkDocs","text":"<p>If <code>mkdocs</code> is set to <code>\"y\"</code>, documentation of your project is automatically added using MkDocs. Next to that, if <code>\"include_github_actions\"</code> is set to <code>\"y\"</code>, the documentation is automatically deployed to your <code>gh-pages</code> branch, and made available at <code>https://&lt;github_handle&gt;.github.io/&lt;project_name&gt;/</code>.</p> <p>To view the documentation locally, simply run</p> <pre><code>make docs\n</code></pre> <p>This command will generate and build your documentation, and start the server locally so you can access it at http://localhost:8000.</p>"},{"location":"features/mkdocs/#enabling-the-documentation-on-github","title":"Enabling the documentation on GitHub","text":"<p>To enable your documentation on GitHub, first navigate to <code>Settings &gt; Actions &gt; General</code> in your repository, and under <code>Workflow permissions</code> select <code>Read and write permissions</code></p> <p>Then, create a new release for your project.</p> <p>Then, in your repository, navigate to <code>Settings &gt; Code and Automation &gt; Pages</code>. If you succesfully created a new release, you should see a notification saying <code>Your site is ready to be published at https://&lt;author_github_handle&gt;.github.io/&lt;project_name&gt;/</code>.</p> <p>To finalize deploying your documentation, under <code>Source</code>, select the branch <code>gh-pages</code>. Your documentation should then be live within a few minutes.</p>"},{"location":"features/mkdocs/#documenting-docstrings","title":"Documenting docstrings","text":"<p>The generated project also converts all your docstrings into legible documentation. By default, the project is configured to work with google style docstrings.</p> <p>An example of a Google style docstring:</p> <pre><code>def function_with_pep484_type_annotations(param1: int, param2: str) -&gt; bool:\n\"\"\"Example function with PEP 484 type annotations.\n\nArgs:\n    param1: The first parameter.\n    param2: The second parameter.\n\nReturns:\n    The return value. True for success, False otherwise.\n</code></pre> <p>For more examples, see here.</p>"},{"location":"features/publishing/","title":"Publishing to PyPI","text":""},{"location":"features/publishing/#releasing-from-github","title":"Releasing from Github","text":"<p>When <code>publish_to_pypi</code> is set to <code>\"y\"</code>, the <code>on-release-main.yml</code> workflow publishes the code to PyPI whenever a new release is made.</p> <p>Before you can succesfully publish your project from the release workflow, you need to add some secrets to your github repository so they can be used as environment variables.</p>"},{"location":"features/publishing/#set-up-for-pypi","title":"Set-up for PyPI","text":"<p>In order to publish to PyPI, the secret <code>PYPI_TOKEN</code> should be set in your repository. In your Github repository, navigate to <code>Settings &gt; Secrets &gt; Actions</code> and press <code>New repository secret</code>. As the name of the secret, set <code>PYPI_TOKEN</code>. Then, in a new tab go to your PyPI Account settings and select <code>Add API token</code>. Copy and paste the token in the <code>Value</code> field for the Github secret in your first tab, and you're all set!</p>"},{"location":"features/publishing/#publishing-from-your-local-machine","title":"Publishing from your local machine","text":"<p>It is also possible to release locally, although it is not recommended. To do so, run:</p> <pre><code>make build-and-publish\n</code></pre>"},{"location":"features/pytest/","title":"Unittesting with Pytest","text":"<p>pytest is automatically added to the environment. There will be a template unittest in the <code>tests</code> directory upon creation of the project, which can be run with</p> <pre><code>make test\n</code></pre> <p>If <code>include_github_actions</code> is set to <code>\"y\"</code>, the tests are automatically run for every merge request, every merge to main, and every release.</p>"},{"location":"features/tox/","title":"Compatibility testing with Tox","text":"<p>If <code>tox</code> is set to <code>\"y\"</code> project uses tox-uv to test compatibility with multiple Python versions. You can run <code>tox</code> locally:</p> <pre><code>uv run tox\n</code></pre> <p>By default, the project is tested with Python <code>3.9</code>, <code>3.10</code>, <code>3.11</code>, <code>3.12</code> and <code>3.13</code>.</p> <p>Testing for compatibility with different Python versions is also done automatically in the CI/CD pipeline on every pull request, merge to main, and on each release.</p> <p>If you want to test for compatbility with more Python versions you can simply add them to <code>tox.ini</code> and to the separate workflows in <code>.github</code>.</p>"},{"location":"features/uv/","title":"Dependency management with uv","text":"<p>The generated repository will uses uv for its dependency management. When you have created your repository using this cookiecutter template, a uv environment is pre-configured in <code>pyproject.toml</code>. All you need to do is add your project-specific dependencies with</p> <pre><code>uv add &lt;package&gt;\n</code></pre> <p>and then install the environment with</p> <pre><code>uv sync\n</code></pre> <p>You can then run commands within your virtual environment, for example:</p> <pre><code>uv run python -m pytest\n</code></pre>"}]}